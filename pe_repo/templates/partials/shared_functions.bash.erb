PUPPET_BIN_DIR="/opt/puppetlabs/puppet/bin"

fail() { echo >&2 "$@"; exit 1; }
cmd()  { hash "$1" >&/dev/null; } # portable 'which'

puppet_installed() {
  if [ -x "${PUPPET_BIN_DIR?}/puppet" -o -x "${OLD_PUPPET_BIN_DIR}/puppet" ]; then
    return 0
  else
    return 1
  fi
}

mktempfile() {
  if cmd mktemp; then
    if [ "osx" = "${PLATFORM_NAME}" ]; then
      mktemp -t installer
    else
      mktemp
    fi
  else
    echo "/tmp/puppet-enterprise-installer.XXX-${RANDOM}"
  fi
}

custom_puppet_configuration() {
  # Parse optional pre-installation configuration of Puppet settings via
  # command-line arguments. Arguments should be of the form
  # <section>:<setting>=<value>
  regex='(.*):(.*)=(.*)'
  for entry in "$@"; do
    if ! [[ "$entry" =~ $regex ]]; then
      echo "WARNING: unable to interpret argument: ${entry}. Expected <section>:<setting>=<value>"
    else
      section=${BASH_REMATCH[1]}
      setting=${BASH_REMATCH[2]}
      value=${BASH_REMATCH[3]}
      "${PUPPET_BIN_DIR}/puppet" config set "$setting" "$value" --section "$section"
    fi
  done
}

ensure_link() {
  "${PUPPET_BIN_DIR}/puppet" resource file "${1?}" ensure=link target="${2?}"
}

ensure_agent_links() {
  target_path="/usr/local/bin"

  if mkdir -p "${target_path}" && [ -w "${target_path}" ]; then
    for bin in facter puppet pe-man hiera; do
      ensure_link "${target_path}/${bin}" "${PUPPET_BIN_DIR}/${bin}"
    done
  else
    echo "!!! WARNING: ${target_path} is inaccessible; unable to create convenience symlinks for puppet, hiera, facter and pe-man.  These executables may be found in ${pe_path?}." 1>&2
  fi
}

# Detected existing installation? Return y if true, else n
is_upgrade() {
  if puppet_installed; then
    echo "y"
  else
    echo "n"
  fi
}

# Sets server, certname and any custom puppet.conf flags passed in to the script
puppet_config_set() {
  # puppet config set does not create the [main] section if it does not exist
  # and does not use it if it has no settings (PUP-4755); and augeas does not
  # consider puppet.conf parseable with settings floating outside of a section
  puppet_conf="$("${PUPPET_BIN_DIR}/puppet" config print confdir)/puppet.conf"
  if ! grep '\[main\]' $puppet_conf; then
    t_surgery='yes'
    cat >> $puppet_conf <<EOF
[main]
place=holder
EOF
  fi

  "${PUPPET_BIN_DIR}/puppet" config set server <%= @master %> --section main

  if [ "${t_surgery}" = 'yes' ]; then
    t_platform_test="x$(uname -s)"
    if [ $t_platform_test = "xDarwin" ]; then
      sed -i '' '/^place=holder$/ d' $puppet_conf
    elif [ $t_platform_test = "xSunOS" -o $t_platform_test = "xAIX" ]; then
      sed '/^place=holder$/ d' $puppet_conf > "${puppet_conf}.new" && mv "${puppet_conf}.new" $puppet_conf
    else
      sed -i '/^place=holder$/ d' $puppet_conf
    fi
  fi

  "${PUPPET_BIN_DIR}/puppet" config set certname $("${PUPPET_BIN_DIR}/facter" fqdn | "${PUPPET_BIN_DIR}/ruby" -e 'puts STDIN.read.downcase') --section agent
  custom_puppet_configuration "$@"

  # To ensure the new config settings take place and to work around differing OS behaviors on recieving a service start command while running
  # (on nix it triggers a puppet run, on osx it does nothing), restart the service by stopping and starting it again
  restart_puppet_agent
}

restart_puppet_agent() {
  "${PUPPET_BIN_DIR}/puppet" resource service puppet ensure=stopped
  "${PUPPET_BIN_DIR}/puppet" resource service puppet ensure=running enable=true
}

start_puppet_agent() {
  "${PUPPET_BIN_DIR}/puppet" resource service puppet ensure=running enable=true
}

# In version 7.10.0 curl introduced the -k flag and performs peer
# certificate validation by default. If peer validation is performed by
# default the -k flag is necessary for this script to work. However, if curl
# is older than 7.10.0 the -k flag does not exist. This function will return
# the correct invocation of curl depending on the version installed.
curl_no_peer_verify() {
  curl_ver_regex='curl ([0-9]+)\.([0-9]+)\.([0-9]+)'
  [[ "$(curl -V 2>/dev/null)" =~ $curl_ver_regex ]]
  curl_majv="${BASH_REMATCH[1]-7}"  # Default to 7  if no match
  curl_minv="${BASH_REMATCH[2]-10}" # Default to 10 if no match
  if [[ "$curl_majv" -eq 7 && "$curl_minv" -le 9 ]] || [[ "$curl_majv" -lt 7 ]]; then
    curl_invocation="curl"
  else
    curl_invocation="curl -k"
  fi

  $curl_invocation "$@"
}

# Uses curl, or if not present, wget to download file from passed http url to a
# temporary location.
#
# Arguments
# 1. The url to download
# 2. The file to save it as
#
# Returns 0 or 1 if download fails.
download_from_url() {
    local t_url="${1?}"
    local t_file="${2?}"

    if cmd curl; then
        # curl on AIX doesn't support -k, but it's the default behavior
        if [ "$PLATFORM_NAME" = "aix" ]; then
          CURL="curl_no_peer_verify"
        else
          CURL="curl -k"
        fi
        t_http_code="$($CURL --tlsv1 -sLo "${t_file?}" "${t_url?}" --write-out %{http_code} || fail "curl failed to get ${t_url?}")"
    elif cmd wget; then
        # wget on AIX doesn't support SSL
        [ "$PLATFORM_NAME" = "aix" ] && fail "Unable to download installation materials without curl"

        # Run wget and use awk to figure out the HTTP status.
        t_http_code="$(wget --secure-protocol=TLSv1 -O "${t_file?}" --no-check-certificate -S "${t_url?}" 2>&1 | awk '/HTTP\/1.1/ { printf $2 }')"
        if [ -z "${t_file?}" ]; then
            fail "wget failed to get ${t_url?}"
        fi
    else
        fail "Unable to download installation materials without curl or wget"
    fi

    if [ "${t_http_code?}" == "200" ]; then
        return 0
    else
        return 1
    fi
}

run_agent_install_from_url() {
    t_agent_install_url="${1?}"

    t_install_file=$(mktempfile)
    if ! download_from_url "${t_agent_install_url?}" "${t_install_file?}"; then
        t_supported_platforms="(el-(4|5|6|7)-(i386|x86_64))|(debian-(6|7|8)-(i386|amd64))|(ubuntu-(10\.04|12\.04|14\.04|15\.04)-(i386|amd64))|(sles-(10|11|12)-(i386|x86_64))|(fedora-(21|22)-(i386|x86_64))|(solaris-(10|11)-(i386|sparc))|(aix-(5\.3|6\.1|7\.1)-power)|(osx-10\.(9|10)-x86_64)"
        if [[ "${PLATFORM_TAG?}" =~ ${t_supported_platforms?} ]]; then
            fail "The agent packages needed to support ${PLATFORM_TAG} are not present on your master. \
    To add them, apply the pe_repo::platform::$(echo "${PLATFORM_TAG?}" | tr - _ | tr -dc '[:alnum:]_') class to your master node and then run Puppet. \
    The required agent packages should be retrieved when puppet runs on the master, after which you can run the install.bash script again."
        else
            fail "This method of agent installation is not supported for ${PLATFORM_TAG?} in Puppet Enterprise v<%= @pe_version %>
    Please install using the puppet-enterprise-installer from the Puppet Enterprise v<%= @pe_version %> tarball"
        fi
    fi

    bash "${t_install_file?}" "${@: 2}" || fail "Error running install script ${t_install_file?}"
}
